
start:
	call _hella_line

endless:
	jp endless

	                           ;  version 2
	                           ;  10 pixel line 4058 T states x1 210 x2 220 y1 & y2 160
	                           ;  variables

_line_x1:	defb 0             ;  line start point X
_line_y1:	defb 0             ;  line start point Y
_line_x2:	defb 0             ;  line end point X
_line_y2:	defb 5             ;  line end point Y


	                           ;  try
	                           ;  _line_x1: defb 112 ; line start point X
	                           ;  _line_y1: defb 174 ; line start point Y
	                           ;  _line_x2: defb 048 ; line end point X
	                           ;  _line_y2: defb 081 ; line end point Y


stepX:	defb 0                     ;  direction of travel horizontally
stepY:	defb 0                     ;  direction of travel vertically
fraction:	defb 0             ;  deciding point on which way the next pixel will travel

iterations:	defb 0             ;  loop counter
steps:	defb 0                     ;  the total number of pixels to be plotted



	                           ;  should be able to reduce to 8 bits


	                           ;  ;;;;;;;;;;;;;;;;;;;;;;
	                           ;  use for plotting
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;
_gfx_xy:	defw 0
_gfx_x:	defb 00
_gfx_y:	defb 00
X_PositionBits:	defb 128,64,32,16,8,4,2,1   ;  small LUT for X plotting
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	                           ;  variables

_hella_line:
	; takes 200-300 T states for setup
	; each iteration for line takes 80 to 100 T states
	;for a 5 pixel line would take approx 750 T states

DX_ABS:	                           ;  deltaX = abs(x2 - x1);
	xor A                      ;  clear flags
	ld A,(_line_x2)            ;  load in X end point
	ld L,A                     ;  copy to L
	ld A,(_line_x1)            ;  load in X start point
	sbc A,L                    ;  find the difference

	jp p,DXABS_finished        ;  if a positive number, ABS found
	                           ;  otherwise
	neg                        ;  invert all bits if negative number
DXABS_finished:
	ld D,A                     ;  write our answer to D

step_X:	                           ;  line_x1 and line_x2 have already been
	                           ;  evaluated once, use those results
	                           ;  stepx = (x2 < x1) ? -1 : 1;
	jp c,positiveDX
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;
negativeDX:	                   ;  point 1 is larger, going backwards
	ld A,-1                    ;  set A to -1 or $FF
	ld (stepX),A               ;  load into variable
	jp DY_ABS
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;

positiveDX:	                   ;  point 2 is larger, going forwards
	ld A,1                     ;  set a to +1
	ld (stepX),A               ;  load into variable
	                           ;  deltaX in D deltaY in E
	                           ;  ;;;;;;;;;;;;;;;;;
DY_ABS:
	xor A                      ;  clear flags
	ld A,(_line_y2)            ;  load in Y end point
	ld L,A                     ;  copy to L
	ld A,(_line_y1)            ;  load in Y start point

	sbc A,L

	jp p,DYABS_finished        ;  if a positive number, ABS found
	                           ;  otherwise
	neg                        ;  invert all bits if negative number
DYABS_finished:
	ld E,A                     ;  write our answer to E register


step_Y:	                           ;  stepy = (y2 < y1) ? -1 : 1;
	                           ;  line_x1 and line_x2 have already been
	                           ;  evaluated once, use those results

	                           ;  sign flag turns off after jump

	jp c,positiveDY
	                           ;  fall through if negative, Y2 is larger
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;;

negativeDY:
	ld A,-1                    ;  set A to -1 or $FF
	ld (stepY),A               ;  load into variable
	jp steps_calculation
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;
positiveDY:
	ld A,1                     ;  set A to +1
	ld (stepY),A               ;  load into variable
	                           ;  ld A,H

steps_calculation:	           ;  steps = max(deltaX, deltaY);
	                           ;  deltaX in D deltaY in E
	ld H,E
	ld A,D                     ;  load in length of Y axis
	cp H                       ;  compare against deltaX
	jr c,delta_Y_max           ;  if carry flag is set, then delta_Y is larger

delta_X_max:
	ld A,D                     ;  now that deltaX is the maximum, load it into A

	jr max_steps

delta_Y_max:
	ld A,E                     ;  now that deltaY is the maximum, load it into A

max_steps:
	ld (steps),A               ;  now we know the maximum pixels that will be used

	                           ;  plot_first_pixel:
	                           ;  ld A,(_line_x1)
	                           ;  ld E,A
	                           ;  ld A,(_line_y1)
	                           ;  ld D,A
	                           ;  call _hellaPlot

	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;;
	                           ;  lets start our loop
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;;;
	jp DXDY_loop


_hellaPlot2:
	ret

DXDY_loop:	                   ;  deltaX in D deltaY in E
	                           ;  if (deltaX > deltaY)
	                           ;  ld A,(deltaX)
	ld H,D                     ;  load deltaX
	ld A,E                     ;  load deltaY
	cp H
	jp nc,delta_Y_larger
	                           ;  otherwise fall through


delta_X_larger:	                   ;  if (deltaX > deltaY)
	jp deltaX_case

	                           ;  else if (deltaY >= deltaX)
delta_Y_larger:
	jp deltaY_case

	                           ;  NOW we need to start treating
	                           ;  deltaX and deltaY as 16 bit variables
	                           ;  ;;;;;;;;;;;;;;;;;;;;;;

deltaX_case:	                   ;  if (deltaX > deltaY)

	                           ;  fraction = deltaY - (deltaX >> 1);
	                           ;  fraction = deltaY - (deltaX / 2);
	                           ;  deltaX in D deltaY in E

	ld A,D                     ;  load deltaX into Accumulator
	srl A                      ;  scroll right 1 bit to divide by 2
	ld C,A                     ;  load into low bit of BC
	ld A,E                     ;  load deltaY into A
	sub C                      ;  subtract deltaX
	ld (fraction),A            ;  store answer

deltaX_loop:	                   ;  for (iterations = 0; iterations <= steps; iterations++)

	ld A,(iterations)
	ld H,A
	ld A,(steps)
	cp H                       ;  compare steps with iterations
	ret z                      ;  replacement to save space and speed
	                           ;  otherwise continue the loop

	                           ;  now plot our point
	                           ;  ld A,(_line_x1)
	                           ;  ld C,A
	                           ;  ld A,(_line_y1)
	                           ;  ld B,A
	                           ;  call _hellaPlot

check_DeltaX_Fraction:
	                           ;  check to see if fraction is less than 0
	xor A                      ;  clear flags and A
	ld L,A                     ;  set L to 0
	ld A,(fraction)            ;  load in fraction
	sub L                      ;  is it less than 0
	jp m,add_x_fraction        ;  L is > 0 Sign flag is ON

subtract_x_fraction:	           ;  fraction >= 0

	                           ;  deltaX in D deltaY in E
	                           ;  fraction is already in A
	                           ;  fraction -= deltaX;
	sbc A,D                    ;  subtract fraction and deltaX
	ld (fraction),A            ;  answer


	                           ;  y1 += stepy;
	ld A,(_line_y1)            ;  load in _line_y1
	ld H,A                     ;  move to H
	ld A,(stepY)               ;  load in stepy
	add A,H                    ;  add the two
	ld (_line_y1),A            ;

	                           ;  fraction < 0

add_x_fraction:
	                           ;  fraction += deltaY;
	                           ;  deltaX in D deltaY in E

	ld A,(fraction)            ;  load in fraction
	add A,E                    ;  add fraction and deltaY
	ld (fraction),A

	                           ;  x1 += stepx;
	ld A,(_line_x1)            ;  load lineX1
	ld H,A                     ;  move to H
	ld A,(stepX)               ;  load stepX
	add A,H                    ;  add the two
	ld (_line_x1),A            ;  write the answer

deltaX_loop_increment:
	                           ;  finally, we increment our loop by 1
	ld A,(steps)               ;  load in steps
	dec A                      ;  decrease staps by 1
	ld (steps),A               ;  rewrite steps

	jp deltaX_loop             ;  jump back to start of loop




	                           ;  ;;;;;;;;;;;;;;;;;;;;;;

deltaY_case:           ;  if (deltaX > deltaY)

                       ;  fraction = deltaX - (deltaY >> 1);
					   ;  fraction = deltaX - (deltaY / 2);
                       ;  deltaX in D deltaY in E
	ld A,E             ;  load deltaY into Accumulator
	srl A              ;  scroll right 1 bit to divide by 2
	ld C,A             ;  load into low bit of BC
	ld A, D            ;  load deltaX
	sub C              ;  subtract deltaX
	ld (fraction),A    ;  store answer


deltaY_loop:           ;  for (iterations = 0; iterations <= steps; iterations++)

	                   ;  incrementor
	xor A              ;  clear flags
	ld A,(iterations)
	ld H,A
	ld A,(steps)
	cp H               ;  compare steps with iterations
	ret z              ;  Line finished
	                           ;  otherwise continue the loop

	                           ;  now plot our point
	                           ;  ld A,(_line_x1)
	                           ;  ld C,A
	                           ;  ld A,(_line_y1)
	                           ;  ld B,A
	                           ;  call _hellaPlot_temp

check_DeltaY_Fraction:
	                           ;  check to see if fraction is less than 0
	xor A                      ;  clear flags and A
	ld L,A                     ;  set L to 0
	ld A,(fraction)            ;  load in fraction
	sub L                      ;  is it less than 0
	jp m,add_y_fraction        ;  L is > 0 Sign flag is ON


subtract_y_fraction:	       ;  fraction >= 0

	                           ;  deltaX in D deltaY in E
	                           ;  fraction is already in A
	                           ;  fraction -= deltaY;
	sbc A,E                    ;  subtract fraction and deltaY
	ld (fraction),A            ;  answer

	                           ;  x1 += stepx;
	ld A,(_line_x1)            ;  load linex1
	ld H,A                     ;  move to H
	ld A,(stepX)               ;  load stepX
	add A,H                    ;  add the two
	ld (_line_x1),A            ;  write the answer


add_y_fraction:
	                           ;  fraction += deltaX;
	                           ;  deltaX in D deltaY in E
	ld A,(fraction)            ;  load in fraction
	add A,D                    ;  add fraction and deltaX
	ld (fraction),A

	                           ;  y1 += stepx;
	ld A,(_line_y1)            ;  load lineY1
	ld H,A                     ;  move to H
	ld A,(stepY)               ;  load stepX
	add A,H                    ;  add the two
	ld (_line_y1),A            ;  write the answer

deltaY_loop_increment:
	                           ;  finally, we increment our loop by 1
	ld A,(steps)               ;  load in steps
	dec A                      ;  decrease steps by 1
	ld (steps),A               ;  rewrite steps

	jp deltaY_loop             ;  jump back to start of loop


